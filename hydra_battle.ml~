(** Hydra Battles *)

(* Message utilisé lorsqu'un bug est détecté – par exemple, dans les fonctions de réplication *)

let the_msg = "ouah, le bug!"

(* Une hydre est représentée sous la forme d'un arbre enraciné dont les noeuds peuvent avoir un nombre quelconque mais néanmoins fini de filles. *)


type hydra = Node of hydra list

(* Quelques abréviations  simples *)

(* Hydre à une seule tête *)
let head = Node []
let is_head : hydra -> bool = fun h -> h = head

(* Nœuds à 1, 2 ou 3 filles *)
let single h = Node [h]
let bi h1 h2 = Node [h1;h2]
let tri h1 h2 h3 = Node [h1;h2;h3]

(* Idem, lorsque les filles sont identiques *)
let bisame h = bi h h
let trisame h = tri h h h

(* Liste des filles d'un nœud *)
let les_filles (Node hs) = hs

(* Exemples d'hydres *)

let baby_hydra = single head (*Taille 2*)(*Hauteur 1*)
let very_small_hydra = bi head head(*Taille 3*)(*Hauteur 1*)
let small_hydra = single (bi head head)(*Taille 4*)(*Hauteur 2*)
let my_hydra = tri head head  (single (single (tri head head head)))(*Taille 9*)(*Hauteur 4*)
let another_hydra = single (tri head head head)(*Taille 5*)(*Hauteur 2*)
let yet_another_hydra = single small_hydra(*Taille 5*)(*Hauteur 3*)
let goodstein_hydra = tri head head (tri head head head)

(* Exemple du sujet, page 1 *)
let example_hydra = tri head (bi (single (tri head head head)) head) head
(* Exemple du sujet après 2 coups d'Hercule et réplication en surface *)
let example_shallow = bi (bi (trisame very_small_hydra) head) (single (single (head)))
(* Exemple du sujet après 2 coups d'Hercule et réplication en profondeur *)
let example_deep =
  let one = bisame very_small_hydra in
  let two = tri one one head in
  tri two head two
(* L'hydre qu'on aurait obtenue si la duplication en profondeur avait fait 2 copies *)
let example_deep_two_copies =
  let one = trisame very_small_hydra in
  let two = Node[one; one; one; head] in
  Node [two; two; two; head]

(* Les hydres pouvant être assez grosses, il est utile de fournir quelques mesures  *)

(*FONCTIONS ANNEXES*)


(*CALCUL NB FILLE D'UN NOEUD *)
let rec nb_fille h=match h with
    Node[ ]->0
   |Node(l)->nb_fille2 l and nb_fille2=function
      |[]->0
      |x::l'->1+nb_fille2 l'

let rec nb_f l=match l with
    []->0
  |x::l'->1+nb_f l'

(*CALCUL NB FILLE POUR LISTE NOEUD *)
let rec aux_list_noeud l x=match l with
    []->x
   |x'::l'->aux_list_noeud l' ((nb_fille x')+x)

let nb_fille_liste_noeud h=match h with
    Node [ ]->0
  |Node l->aux_list_noeud l 0


(*CREER UNE LISTE A PARTIR DES FILLES D'UNE LISTE DE NOEUD *)
let rec assemblage_liste_fille l=match l with
    []->[]
   |x::t->if les_filles x != [] then (les_filles x)@(assemblage_liste_fille t)
          else assemblage_liste_fille t


let rec nb_element_list l = match l with
  |[]->0
  |x::l'-> 1+ nb_element_list l'

let rec aux_histo h_filles  = match h_filles with
  |[]->[]
  |x::t-> nb_element_list h_filles::(aux_histo(assemblage_liste_fille(h_filles)))

let rec verifier h = match les_filles h with
  |[]->true
  |x::t->false

let rec nb_tete_ligne l =match l with
  |[]->0
  |x::t-> if verifier x then 1+nb_tete_ligne t else nb_tete_ligne t


let rec aux_histo2 h_filles = match h_filles with
  |[]->[]
  |x::t-> nb_tete_ligne h_filles::(aux_histo2(assemblage_liste_fille(h_filles)))

let rec concat_uff h_filles = match h_filles with
  |[]->[]
  |x::t-> x::(concat_uff t)


let concat h = concat_uff (les_filles h)


let rec sort_modified = function
    | [] -> []
    | (x, y) :: l -> insert (x, y) (sort_modified l)
  and insert (a, b) = function
    | [] -> [(a, b)]
    | (x, y) :: l -> if a < x then (a, b) :: (x, y) :: l
                     else (x, y) :: insert (a, b) l;;

let rec modifier_y h_list y = match h_list with
  |[]->[]
  |(a,b)::c->(a,y)::modifier_y c (y+1)


 
let rec aux_hydra_edges h_list x y acc= match h_list with
  |[]->[]
  |a::b -> if verifier a then [(x,y+1)]@aux_hydra_edges b x (y+1) (acc+1) (* bon *)
           else
             [(x,y+1)]@aux_hydra_edges (les_filles a) (y+1) (acc+nb_f(h_list)) (acc+nb_f(h_list)) @aux_hydra_edges b x (y+1) acc


let rec hydra_edges h = match h with
  |Node []->[(0,1)]
  |_-> modifier_y(sort_modified (aux_hydra_edges (les_filles h) 0 0 0)) 1



(* Écrire une fonction donnant la taille d'une hydre (nombre total de noeuds) *)

let rec size h=match h with
  |Node(l)->1 + (List.fold_left (+) 0 (List.map (size) l))

(* Écrire une fonction donnant la hauteur d'une hydre (longueur maximale d'un  chemin partant du pied) *)
let rec height h = match h with
    Node[ ]->0
   |Node (l)->1+(hauteurF l) and hauteurF= function
      |[]->0
      |x::l'->max(height x) (hauteurF l')

(* Écrire une fonction qui calcule l'histogramme d'une hydre, nombre de noeuds à chaque niveau *)

let histogram h= match h with
  |Node [] -> [1]
  |_-> 1::aux_histo (les_filles h)

(* Écrire une fonction qui compte le nombre de têtes à chaque niveau. *)
let histogram_heads h= match h with
  |Node []-> [1]
  |_->0:: aux_histo2 (les_filles h)

(*
   Écrire une fonction qui retourne une liste triée d'arêtes de l'hydre, avec 
   les contraintes décrites dans le sujet.
 *)

  (* 
   Affiche une hydre h.
   Prérequis : la fonction hydra_edges doit avoir été écrite.
   *)
(*
let show_hydra h =
  (* Translates the list of edges in dot format, and outputs it to filename *)
  let hydra_to_dot h filename =    
    let rec edges_to_dot edges channel =
      match edges with
        [] -> ()
      | (a,b)::r -> Printf.fprintf channel "%d -- %d\n" a b; edges_to_dot r channel
    in
    let dot_preamble = "graph hydra {\n" ^
                       "\trankdir=BT;\n" ^
                       "\tnode [label=\"\" shape=point style=filled fixedsize=true];\n"
    in
    let dot_postamble = "\n}" in
    let edges = hydra_edges h in
    let channel = open_out filename in
    Printf.fprintf channel "%s\n" dot_preamble;
    edges_to_dot edges channel;
    Printf.fprintf channel "%s\n" dot_postamble;
    close_out channel
  in
  (* Get uname of the system to properly set the png viewer *)
  let uname() =
    let (inchannel, outchannel) = Unix.open_process "uname" in
    let name = input_line inchannel in
    close_in inchannel;
    close_out outchannel;
    name
  in
  (* Set viewer to Imagemagick "display" under Linux, or "open" under OSX, otherwise fail :)  *)
  let viewer = let uname = uname() in
    if uname = "Linux" then " display "
    else if uname = "Darwin" then " open "
    else failwith "Viewer not set under windows" in 
  (* Set style to view hydra's heads *)
  let style = "{style=\"invisible\",$.shape=\"none\",height=0.2,width=0.2,image=\"head.png\",label=\"\"}" in
  (* Prepare command *)
  let command = "gvpr -c 'N[$.outdegree==0] " ^ style ^ "' tmp.dot" (* post-process dot file to set style and view hydra's heads *)
                ^ "|" ^ "dot -T png -o tmp.png "                    (* Launch dot on resulting file *)
                ^ "&&" ^ viewer ^ " tmp.png" ^ "&"                  (* Launch viewer in bg *)
  in
  let _ = hydra_to_dot h "tmp.dot" in
  Unix.system command

(*
   Pour désigner un noeud ou une tête, on utilise une notation dite "de Dewey" : le chemin d'accés à un noeud
   est une liste d'indices qui représente le chemin à suivre depuis la racine ("le pied", si on préfère).
   un 0 signifie "aller vers la fille la plus à gauche", etc.
*)
*)
type path = int list

(*
   Réactions de l'Hydre.
   Quand la tête de l'Hydre donnée par le chemin p est supprimée, l'Hydre
   effectue son algorithme de réplication.
*)

let rec repeat_concat n a l =
  if n <= 0
  then l
  else repeat_concat (n-1) a (a::l)

(* Supprime le i-ème élément de hs (si c'est une tête) *)

let rec remove_head i hs =
  match i,hs with
  | 0,(Node []) ::hs' -> hs'
  | i, h::hs' when i> 0 -> h :: remove_head (i-1) hs'
  |  _,_  -> failwith the_msg

(* Un tour de base : 
   - Hercule coupe une tête de l'Hydre h donnée par le chemin p.
   - L'Hydre se réplique n fois.
*)

type replication_fun = path -> hydra -> int -> hydra

(* Version en profondeur *)
let rec deep_replication : replication_fun = fun  p h n ->
  match p,h with
    [i], Node l -> Node (remove_head i l)
  | (_::_), Node l -> Node (deep_replication_list p l n)
  | _,_ -> failwith the_msg
and deep_replication_list p l n =
  match p,l with
    0::p', h::lh -> repeat_concat (1+n) (deep_replication p' h n) lh
  | i::p', h::lh when i> 0 -> h :: deep_replication_list (i-1::p') lh n
  | _,_ -> failwith the_msg

(* Version en surface *)
let rec shallow_replication : replication_fun = fun p h  n ->
  match p,h with
    [i], Node l -> Node (remove_head i l)
  | (_::_), Node l -> Node (shallow_replication_list p l n)
  | _,_ -> failwith the_msg
and shallow_replication_list p l n =
  match p,l with
    [0;i], Node l :: lh -> repeat_concat (1+n) (Node (remove_head  i l)) lh
  | 0::p',  h::lh -> shallow_replication p' h n :: lh
  | i::p', h::lh when i> 0 -> h :: shallow_replication_list (i-1::p') lh n
  | _,_ -> failwith the_msg

(* Les stratégies: Hercule et l'Hydre suivent chacun une stratégie *)

(*
   Une stratégie d'Hercule est, à partir d'une Hydre, de choisir une tête.
   Le programmeur qui définit une stratégie doit s'assurer qu'elle retourne
   toujours un chemin vers une tête.
*)

type hercules_strat =  hydra -> path

(*
   Suggestion: avant la fonction check_hercules_strategy, écrire une fonction sub_hydra
   telle que sub_hydra path h renvoie la sous-hydre de h donnée par le chemin path.
*)

let rec sub_hydra path h =  match path with
    []->h
   |x::p-> match h with
           |Node[]->h
           |Node(l)-> sub_hydra p (List.nth l x)

(* Écrire la fonction suivante qui teste si une stratégie choisit bien une tête  *)
let check_hercules_strategy strat h = if sub_hydra strat h = head then true
                                      else
                                        false


(* Écrire la stratégie choisissant la tête la plus à gauche *)

let rec aux_leftmost_head_strat h = match h with
  |Node []-> [0]
  |Node (l)-> if (List.nth l 0)!=head then 0::(aux_leftmost_head_strat(List.nth l 0))
              else [0]

  
let leftmost_head_strat h = aux_leftmost_head_strat h

(* Écrire la stratégie choisissant une tête de hauteur maximale *)

let rec aux2 l inoeudpro proMax inoeudC=match l with
    []->inoeudpro
   |x::l'->if (height x)>proMax then aux2 l' inoeudC (height x) (inoeudC+1)
           else aux2 l' inoeudpro proMax (inoeudC+1)
 
let rec aux_highest_head_strat h inoeudpro proMax = match h with
  |Node [] -> []
  |Node (l)-> let i=aux2 l inoeudpro proMax 0 in
              i::(aux_highest_head_strat (List.nth l i) 0 0)

let highest_head_strat h =aux_highest_head_strat h 0 0

(* Écrire une stratégie visant à choisir une tête le plus près du sol possible *)

let rec y_a_t_il_une_tete_dans_l_avion h_list = match h_list with
  |[]-> false
  |a::b -> if is_head a then true else y_a_t_il_une_tete_dans_l_avion b

let rec hMin h_list compteur = if y_a_t_il_une_tete_dans_l_avion h_list then compteur
                               else hMin (assemblage_liste_fille h_list) compteur+1

let height_min h = match h with
    Node[ ]->0
   |Node (l)->hMin l 1



let rec aux_closest h_liste index profMin = match h_liste with
  |[]-> []
  |a::b->if height_min a = profMin-1 then index::(aux_closest (les_filles a) 0 (profMin-1))
         else
           aux_closest b (index+1) profMin

let closest_to_ground_strat h = match h with
  |Node[] -> [0]
  |Node (l) ->0::(aux_closest l 0 (height_min h))



(* En apprenant à utiliser la bibliothèque Random, écrire une stratégie pour choisir une tête au hasard *)

let rec aux_random_strat h = match h with
  |Node [] -> []
  |Node (l) -> let i= Random.int ((nb_f l)+1) in
               i::aux_random_strat (List.nth l i)

let random_strat h = aux_random_strat h

(* Étant donnée une date, l'Hydre peut calculer un nombre de réplications >= 1 *)

type time = Time of int

type hydra_strat =  time -> int

let check_hydra_strategy : hydra_strat -> time -> bool = fun st t -> st t >= 1

(* Une stratégie classique (celle de la vidéo): à chaque tour, le nombre de réplications est incrémenté. *)

let original_hydra_strat : hydra_strat = function Time  t -> t + 1

(* Une stratégie plus amusante : attention à l'explosion de pile ! *)

let boum : hydra_strat = function (Time t) ->
  let rec exp2 i =
    if i = 0 then 1 else 2 * exp2 (i-1)
  in exp2 t

(* Genre de bataille *)

type genre_de_bataille = Battle_kind of replication_fun * hercules_strat * hydra_strat


(*  Le score final d'une bataille *)
type result =
    Hercules_wins of time       (* Nombre de tours effectués *)
  | Hercules_gives_up of hydra  (* Hydre restante *)

(* Écrire la fonction de simulation *)
let simulation (Battle_kind(replication,hercules_strat, hydra_strat)) (initial_hydra) (Time(duration))=

  let rec aux_simulation (Time(monTemps)) hydra =
    if Time(monTemps) = Time(duration) && hydra!=Node[] then Hercules_gives_up (hydra)
    else if Time(monTemps)=Time(duration) && hydra=Node[] then Hercules_wins (Time(monTemps))
    else if hydra=Node[] then Hercules_wins (Time(monTemps))
    else
      aux_simulation (Time(monTemps+1)) (replication (hercules_strat hydra) hydra (hydra_strat(Time(monTemps+1))))

  in 
  aux_simulation (Time(0)) initial_hydra
    
        (*


  : genre_de_bataille -> hydra -> time -> result = 
  fun (Battle_kind(replication,hercules_strat, hydra_strat)) initial_hydra (Time(duration)) ->

    let rec aux_simulation
           if Time (current_time) = time then  *)

(*
   Écrire une fonction make_trace telle que make_trace measure bat h_init (Time t) donne la suite 
   des valeurs de la fonction measure sur les hydres obtenues en partant de l'hydre h_init et 
   en effectuant t tours de la bataille de genre bat.
*)

let make_trace : (hydra -> 'a) -> genre_de_bataille -> hydra -> time -> 'a list =
  fun measure (Battle_kind(replication,hercules_strat, hydra_strat)) initial_hydra (Time duration) ->
  failwith "A écrire"

(* Écrire ici vos tests *)
